#!/usr/bin/env ruby

require "date"
require "cinch"
require "sinatra"
require "yaml"
require "json"
require_relative "git-io"
require 'dotenv'
require 'openssl'

config_file = ARGV.shift || "config.yml"
if not File.exists? config_file
  puts "Can't find config file #{config_file}"
  puts "Either create it or specify another config file with: #{File.basename $0} [filename]"
  exit
end

$config = YAML.load_file config_file

$bot = Cinch::Bot.new do
  configure do |c|
    c.nick = $config["irc"]["nick"]
    c.user = $config["irc"]["user"]
    c.realname = $config["irc"]["realname"]
    c.server = $config["irc"]["server"]
    c.port = $config["irc"]["port"]
    c.channels = $config["irc"]["channels"]
  end
end

Thread.new do
  $bot.start
end

Dotenv.load

def say(repo,msg)
  $config["irc"]["channels"].each do |chan|
    unless $config["filters"].include? chan and not $config["filters"][chan].include? repo
      $bot.Channel(chan).send msg
    end
  end
end

##############
# Formatting #
##############

## TODO: Combine these where possible

def get_repo(repo)
  Cinch::Formatting.format(:green, "#{repo}")
end

def get_author(author)
  Cinch::Formatting.format(:silver, "#{author}")
end

def get_branch(branch)
  Cinch::Formatting.format(:orange, "#{branch}")
end

def get_commit
  Cinch::Formatting.format(:grey, "#{@commit}")
end

def get_cauthor
  Cinch::Formatting.format(:silver, "#{@cauthor}")
end

def format_prtitle(data)
  Cinch::Formatting.format(:teal, "#{data["pull_request"]["title"]}")
end

def format_prnumber(data)
  Cinch::Formatting.format(:orange, "##{data["pull_request"]["number"]}")
end

def format_prhead(data)
  Cinch::Formatting.format(:red, "#{data["pull_request"]["head"]["ref"]}")
end

def format_prbase(data)
 Cinch::Formatting.format(:red, "#{data["pull_request"]["base"]["ref"]}")
end

def format_issuenumber(data)
  Cinch::Formatting.format(:orange, "##{data["issue"]["number"]}")
end

def format_issuetitle(data)
  Cinch::Formatting.format(:teal, "#{data["issue"]["title"]}")
end

configure do
  set :bind, $config["http"]["host"]
  set :port, $config["http"]["port"]
  set :logging, false
  set :lock, true
end

get "/" do
  "GitBot lives here. Direct your hooks to /github."
end

post "/github" do
  request.body.rewind

  ## Update this later as per https://developer.github.com/webhooks/securing/
  return halt 500, "Signatures didn't match!" unless request.env['HTTP_X_HUB_SIGNATURE'] == ('sha1=' + OpenSSL::HMAC.hexdigest(OpenSSL::Digest::Digest.new('sha1'), ENV['GITHUB_VERIFIER_SECRET'], request.body.read))

  p params[:payload]
  push = JSON.parse(params[:payload])

  repo = push["repository"]["name"]
  branch = push["ref"].gsub(/^refs\/heads\//,"")
  commiturl = Git.io.generate push["compare"]
  author = push["head_commit"]["author"]["username"]
  gitip = push["head_commit"]
  commits = push["commits"]

  # sort commits by timestamp
  push["commits"].sort! do |a,b|
    ta = tb = nil
    begin
      ta = DateTime.parse(a["timestamp"])
    rescue ArgumentError
      ta = Time.at(a["timestamp"].to_i)
    end

    begin
      tb = DateTime.parse(b["timestamp"])
    rescue ArgumentError
      tb = Time.at(b["timestamp"].to_i)
    end

    ta <=> tb
  end

  # output first 5 commits
  say repo, "#{Cinch::Formatting.format(:Black, '[')}" + get_repo(repo) + "#{Cinch::Formatting.format(:Black, ']')} " + get_author(author) + " pushed #{commits.length} new commit#{commits.count == 1 ? '' : 's'} to " + get_branch(branch) + ": #{commiturl}"
  push["commits"][0..4].each do |c|
    message = c["message"]
    @commit = c["id"][0..7]
    @cauthor = c["author"]["username"]

    if message.include? "\n\n"
      message1, match, message2 = message.rpartition(/\n\n/)
    else
      message1 = message
    end

    say repo, get_repo(repo) + "/" + get_branch(branch) + " " + get_commit + " " + get_cauthor + ": #{message1}"
  end

  if push["commits"].length-5 > 0
    say repo, get_repo(repo) + "/" + get_branch(branch) + " ...and #{push["commits"].length-5} more @ #{commiturl}"
  end

  push.inspect
end