#!/usr/bin/env ruby

require "date"
require "cinch"
require "sinatra"
require "yaml"
require "json"
require_relative "git-io"
require 'dotenv'
require 'openssl'

config_file = ARGV.shift || "config.yml"
if not File.exists? config_file
  puts "Can't find config file #{config_file}"
  puts "Either create it or specify another config file with: #{File.basename $0} [filename]"
  exit
end

$config = YAML.load_file config_file

$bot = Cinch::Bot.new do
  configure do |c|
    c.nick = $config["irc"]["nick"]
    c.user = $config["irc"]["user"]
    c.realname = $config["irc"]["realname"]
    c.server = $config["irc"]["server"]
    c.port = $config["irc"]["port"]
    c.channels = $config["irc"]["channels"]
  end
end

Thread.new do
  $bot.start
end

Dotenv.load

def say(repo,msg)
  $config["irc"]["channels"].each do |chan|
    unless $config["filters"].include? chan and not $config["filters"][chan].include? repo
      $bot.Channel(chan).send msg
    end
  end
end

##############
# Formatting #
##############

## TODO: Combine these where possible

def get_repo(repo)
  Cinch::Formatting.format(:green, "#{repo}")
end

def get_author(author)
  Cinch::Formatting.format(:silver, "#{author}")
end

def get_branch(branch)
  Cinch::Formatting.format(:orange, "#{branch}")
end

def get_commit
  Cinch::Formatting.format(:grey, "#{@commit}")
end

def get_cauthor
  Cinch::Formatting.format(:silver, "#{@cauthor}")
end

def format_prtitle(data)
  Cinch::Formatting.format(:teal, "#{data["pull_request"]["title"]}")
end

def format_prnumber(data)
  Cinch::Formatting.format(:orange, "##{data["pull_request"]["number"]}")
end

def format_prhead(data)
  Cinch::Formatting.format(:red, "#{data["pull_request"]["head"]["ref"]}")
end

def format_prbase(data)
 Cinch::Formatting.format(:red, "#{data["pull_request"]["base"]["ref"]}")
end

def format_issuenumber(data)
  Cinch::Formatting.format(:orange, "##{data["issue"]["number"]}")
end

def format_issuetitle(data)
  Cinch::Formatting.format(:teal, "#{data["issue"]["title"]}")
end

#####################
# Git.io generation #
#####################

### TODO: Combine these

def format_commiturl(data)
  Git.io.generate data["compare"]
end

def format_prurl(data)
  Git.io.generate data["pull_request"]["html_url"]
end


def format_issueurl(data)
  Git.io.generate data["issue"]["html_url"]
end

configure do
  set :bind, $config["http"]["host"]
  set :port, $config["http"]["port"]
  set :logging, false
  set :lock, true
end

#############
# Webserver #
#############

get "/" do
  "GitBot lives here. Direct your hooks to /github."
end

post "/github" do
  request.body.rewind

  payload_body = request.body.read
  verify_signature(payload_body) if $config["github"].key?(:secret)
  p params[:payload]
  data = JSON.parse(params[:payload])
  event = request.env['HTTP_X_GITHUB_EVENT'].to_sym
  return halt 202, "Ignored: #{event}" if ignored?(event, data)
  send "get_#{event}", data
  return halt 200

end